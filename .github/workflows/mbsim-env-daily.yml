name: MBSim-Env Daily
on:
  push: #mfmf remove
  schedule:
    - cron: '36 23 * * *'
concurrency: 
  group: mbsim-env-daily
  cancel-in-progress: true
env:
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: staging
  MBSIMENVSERVERNAME: wwwstaging.mbsim-env.de
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: www.mbsim-env.de:10443
  MBSIMENVDATABASE: www.mbsim-env.de:15432
  MBSIMENVFILESTORAGE: www.mbsim-env.de:11122
  # get secrets
  mbsimenvsec_githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  mbsimenvsec_codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
  mbsimenvsec_codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
  mbsimenvsec_codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
  mbsimenvsec_codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
jobs:



#mfmf  getBuildMatrix:
#mfmf    name: Get build matrix
#mfmf    uses: ./.github/workflows/mbsim-env-getbuildmatrix.yml
#mfmf    with:
#mfmf      dailyRun: true
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf  buildMatrix:
#mfmf    name: B&e
#mfmf    uses: ./.github/workflows/mbsim-env-matrixbuild.yml
#mfmf    needs: getBuildMatrix
#mfmf    with:
#mfmf      matrix: ${{needs.getBuildMatrix.outputs.matrix}}
#mfmf      uploadArtifactLocalLcov: false
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf
#mfmf
#mfmf
#mfmf  buildPartitionedExamples:
#mfmf    name: B
#mfmf    uses: ./.github/workflows/mbsim-env-matrixbuild.yml
#mfmf    with:
#mfmf      matrix: |
#mfmf        {"data":
#mfmf          [{
#mfmf            "branches": 
#mfmf              {"fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"},
#mfmf            "os":
#mfmf              {"buildType": "linux64-dailydebug", "image": "mbsimenv/build",  "args": "--disableRunExamples"},
#mfmf          }]
#mfmf        }
#mfmf      uploadArtifactLocalLcov: true
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf
#mfmf
#mfmf
#mfmf  examplesPre:
#mfmf    name: "E pre"
#mfmf    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
#mfmf    needs: buildPartitionedExamples
#mfmf    if: ${{!fromJson(needs.buildPartitionedExamples.outputs.buildInfo).skipped}}
#mfmf    with:
#mfmf      matrix: |
#mfmf        {"data": [
#mfmf          {"args": "--runExamplesPre"}
#mfmf        ]}
#mfmf      buildInfo: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
#mfmf      runexamplesInfo: '{"runID": -1}'
#mfmf      downloadArtifactLocalLcov: false
#mfmf      uploadArtifactLcovdata: false
#mfmf      downloadArtifactLcovdata: false
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf  examplesRun:
#mfmf    name: "E worker"
#mfmf    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
#mfmf    needs: [buildPartitionedExamples, examplesPre]
#mfmf    if: ${{!fromJson(needs.buildPartitionedExamples.outputs.buildInfo).skipped}}
#mfmf    with:
#mfmf      matrix: |
#mfmf        {"data": [
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"},
#mfmf          {"args": "--runExamplesPartition"}
#mfmf        ]}
#mfmf      buildInfo: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
#mfmf      runexamplesInfo: ${{needs.examplesPre.outputs.runexamplesInfo}}
#mfmf      downloadArtifactLocalLcov: true
#mfmf      uploadArtifactLcovdata: true
#mfmf      downloadArtifactLcovdata: false
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf  examplesPost:
#mfmf    name: "E post"
#mfmf    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
#mfmf    needs: [buildPartitionedExamples, examplesRun, examplesPre]
#mfmf    if: ${{!fromJson(needs.buildPartitionedExamples.outputs.buildInfo).skipped}}
#mfmf    with:
#mfmf      matrix: |
#mfmf        {"data": [
#mfmf          {"args": "--runExamplesPost"}
#mfmf        ]}
#mfmf      buildInfo: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
#mfmf      runexamplesInfo: ${{needs.examplesPre.outputs.runexamplesInfo}}
#mfmf      downloadArtifactLocalLcov: true
#mfmf      uploadArtifactLcovdata: false
#mfmf      downloadArtifactLcovdata: true
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf
#mfmf
#mfmf
#mfmf  examplesPreValgrind:
#mfmf    name: "E valgrind pre"
#mfmf    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
#mfmf    needs: [buildPartitionedExamples, examplesRun] # needs only buildPartitionedExamples;
#mfmf             # exampleRun is just added to priorize the normal runs over the valgrind run;
#mfmf             # moreover the dynamic scheduling does not work for parallel --runExamplesPartition jobs;
#mfmf             # (examplesPreValgrind is not stared before to ensure correct startTime recording in the MBSim-Env database)
#mfmf    if: ${{!fromJson(needs.buildPartitionedExamples.outputs.buildInfo).skipped}}
#mfmf    with:
#mfmf      matrix: |
#mfmf        {"data": [
#mfmf          {"args": "--runExamplesPre --valgrindExamples"}
#mfmf        ]}
#mfmf      buildInfo: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
#mfmf      runexamplesInfo: '{"runID": -1}'
#mfmf      downloadArtifactLocalLcov: false
#mfmf      uploadArtifactLcovdata: false
#mfmf      downloadArtifactLcovdata: false
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf  examplesRunValgrind:
#mfmf    name: "E valgrind worker"
#mfmf    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
#mfmf    needs: [buildPartitionedExamples, examplesPreValgrind]
#mfmf    if: ${{!fromJson(needs.buildPartitionedExamples.outputs.buildInfo).skipped}}
#mfmf    with:
#mfmf      matrix: |
#mfmf        {"data": [
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"},
#mfmf          {"args": "--runExamplesPartition --valgrindExamples"}
#mfmf        ]}
#mfmf      buildInfo: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
#mfmf      runexamplesInfo: ${{needs.examplesPreValgrind.outputs.runexamplesInfo}}
#mfmf      downloadArtifactLocalLcov: true
#mfmf      uploadArtifactLcovdata: true
#mfmf      downloadArtifactLcovdata: false
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf  examplesPostValgrind:
#mfmf    name: "E valgrind post"
#mfmf    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
#mfmf    needs: [buildPartitionedExamples, examplesRunValgrind, examplesPreValgrind]
#mfmf    if: ${{!fromJson(needs.buildPartitionedExamples.outputs.buildInfo).skipped}}
#mfmf    with:
#mfmf      matrix: |
#mfmf        {"data": [
#mfmf          {"args": "--runExamplesPost --valgrindExamples"}
#mfmf        ]}
#mfmf      buildInfo: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
#mfmf      runexamplesInfo: ${{needs.examplesPreValgrind.outputs.runexamplesInfo}}
#mfmf      downloadArtifactLocalLcov: true
#mfmf      uploadArtifactLcovdata: false
#mfmf      downloadArtifactLcovdata: true
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}



#mfmf
  buildPartitionedExamples:
    name: dummy
    runs-on: ubuntu-latest
    outputs:
      buildInfo: ${{steps.dummy.outputs.buildInfo}}
    steps:
      - name: "dummy"
        run: echo '::set-output name=buildInfo::{"skipped":false,"repo":{"mbsim":"master"}}'
        id: dummy
#mfmf
  buildDoc:
    name: "Build manuals"
    runs-on: ubuntu-latest
    needs: buildPartitionedExamples
    if: ${{!fromJson(needs.buildPartitionedExamples.outputs.buildInfo).skipped}}
    steps:
      - name: "Docker: pull image"
        run: docker image pull mbsimenv/builddoc:${{env.MBSIMENVTAGNAME}}
      - name: "Docker: run container"
        run: >
          docker run
          --init
          --env MBSIMENVDATABASE
          --env MBSIMENVFILESTORAGE
          --env MBSIMENVSERVERNAME
          --env MBSIMENVTAGNAME
          --env mbsimenvsec_githubStatusAccessToken
          --env mbsimenvsec_djangoSecretKey
          --env mbsimenvsec_postgresPassword
          --env mbsimenvsec_filestoragePassword
          --env mbsimenvsec_codecovUploadToken_fmatvec
          --env mbsimenvsec_codecovUploadToken_hdf5serie
          --env mbsimenvsec_codecovUploadToken_openmbv
          --env mbsimenvsec_codecovUploadToken_mbsim
          mbsimenv/builddoc:${{env.MBSIMENVTAGNAME}}
          --mbsimBranch ${{fromJson(needs.buildPartitionedExamples.outputs.buildInfo).repo.mbsim}}
