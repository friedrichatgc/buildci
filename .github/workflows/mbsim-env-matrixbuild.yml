name: MBSim-Env Matrix Build
on:
  workflow_call:
    inputs:
      matrixInput:
        required: true
        type: string
      uploadArtifactInput:
        required: true
        type: boolean
      MBSIMENVTAGNAME:
        required: true
        type: string
      MBSIMENVSERVERNAME:
        required: true
        type: string
      MBSIMENVWWW:
        required: true
        type: string
      MBSIMENVDATABASE:
        required: true
        type: string
      MBSIMENVFILESTORAGE:
        required: true
        type: string
    secrets:
      githubStatusAccessToken:
        required: true
      djangoSecretKey:
        required: true
      postgresPassword:
        required: true
      filestoragePassword:
        required: true
      codecovUploadToken_fmatvec:
        required: true
      codecovUploadToken_hdf5serie:
        required: true
      codecovUploadToken_openmbv:
        required: true
      codecovUploadToken_mbsim:
        required: true
#env:
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: ${{inputs.MBSIMENVTAGNAME}}
  MBSIMENVSERVERNAME: ${{inputs.MBSIMENVSERVERNAME}}
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: ${{inputs.MBSIMENVWWW}}
  MBSIMENVDATABASE: ${{inputs.MBSIMENVDATABASE}}
  MBSIMENVFILESTORAGE: ${{inputs.MBSIMENVFILESTORAGE}}
  # get secrets
  mbsimenvsec_githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  mbsimenvsec_codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
  mbsimenvsec_codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
  mbsimenvsec_codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
  mbsimenvsec_codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
jobs:
  build:
    name: "Build ${{matrix.data.os.buildType}}: ${{matrix.data.branches.fmatvecBranch}} ${{matrix.data.branches.hdf5serieBranch}} ${{matrix.data.branches.openmbvBranch}} ${{matrix.data.branches.mbsimBranch}}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(inputs.matrixInput)}}
    steps:
      - name: "Dump build config"
        run: >
          echo -e " buildType       = ${{matrix.data.os.buildType}}
                    image           = ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}}
                    fmatvecBranch   = ${{matrix.data.branches.fmatvecBranch}}
                    hdf5serieBranch = ${{matrix.data.branches.hdf5serieBranch}}
                    openmbvBranch   = ${{matrix.data.branches.openmbvBranch}}
                    mbsimBranch     = ${{matrix.data.branches.mbsimBranch}}
                    Triggered by repo = ${{github.repository}}
                                 branch = ${{github.ref_name}}
                                 sha = ${{github.sha}}
                                 event = ${{github.event_name}}" | tr -s ' '
      - name: "Pull docker build image"
        run: >
          docker image pull ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}} &&
          mkdir -m 777 -p ${{github.workspace}}/mbsim-env ${{github.workspace}}/mbsim-ccache
      - name: "Create matrix UUID"
        shell: python
        id: matrixUUIDStep
        run: |
          import uuid
          print("::set-output name=matrixUUIDStepOutput::"+str(uuid.uuid4()))
      - name: "Cache ccache directory"
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/mbsim-ccache
          key: ccache-${{matrix.data.os.buildType}}--${{steps.matrixUUIDStep.outputs.matrixUUIDStepOutput}}
          restore-keys: |
            ccache-${{matrix.data.os.buildType}}--
      - name: "Fix cached ccache file permissions"
        run: chmod -R 777 ${{github.workspace}}/mbsim-ccache # the docker user id is different than the current user id
      - name: "Run build/examples"
        run: >
          docker run
          --init
          --label buildtype=${{matrix.data.os.buildType}}
          --env MBSIMENVDATABASE
          --env MBSIMENVFILESTORAGE
          --env MBSIMENVSERVERNAME
          --env MBSIMENVTAGNAME
          --env MBSIMENVIMAGEID=$(docker image inspect -f "{{.Id}}" ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}})
          --env mbsimenvsec_githubStatusAccessToken
          --env mbsimenvsec_djangoSecretKey
          --env mbsimenvsec_postgresPassword
          --env mbsimenvsec_filestoragePassword
          --env mbsimenvsec_codecovUploadToken_fmatvec
          --env mbsimenvsec_codecovUploadToken_hdf5serie
          --env mbsimenvsec_codecovUploadToken_openmbv
          --env mbsimenvsec_codecovUploadToken_mbsim
          -v ${{github.workspace}}/mbsim-env:/mbsim-env
          -v ${{github.workspace}}/mbsim-ccache:/mbsim-ccache
          ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}}
          --buildType ${{matrix.data.os.buildType}}
          --executor '<a href="https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}/attempts/${{github.run_attempt}}">GitHub Actions</a>'
          -j $(nproc)
          --ccacheSize 5
          --fmatvecBranch ${{matrix.data.branches.fmatvecBranch}}
          --hdf5serieBranch ${{matrix.data.branches.hdf5serieBranch}}
          --openmbvBranch ${{matrix.data.branches.openmbvBranch}}
          --mbsimBranch ${{matrix.data.branches.mbsimBranch}}
          ${{matrix.data.os.args}}
          || exit 0
          # do not report error (is handled by www.mbsime-env.de and cache should also be saved in case of errors)
      - name: "Detailed build/examples output"
        shell: python
        run: |
          import json
          try:
            with open("${{github.workspace}}/mbsim-env/local/.buildInfo.json", "r") as f:
              buildInfo=json.load(f)
            print("https://${{env.MBSIMENVSERVERNAME}}/builds/run/"+str(buildInfo["buildRunID"])+"/")
          except:
            print("No buildInfo file found")
      - name: "Archive artifact .../mbsim-env/local/ for upload"
        if: inputs.uploadArtifactInput
        run: tar -czf ${{github.workspace}}/mbsim-env/local.tar.gz -C ${{github.workspace}}/mbsim-env/ local/
      - name: "Upload artifact archive .../mbsim-env/local/"
        if: inputs.uploadArtifactInput
        uses: actions/upload-artifact@v3
        with:
          name: mbsim-env-local
          retention-days: 1
          path: ${{github.workspace}}/mbsim-env/local.tar.gz
