name: MBSim-Env
on:
  push:
  schedule:
    - cron: '36 23 * * *'
env:
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: staging
  MBSIMENVSERVERNAME: wwwstaging.mbsim-env.de
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: www.mbsim-env.de:10443
  MBSIMENVDATABASE: www.mbsim-env.de:15432
  MBSIMENVFILESTORAGE: www.mbsim-env.de:11122
  # get secrets
  mbsimenvsec_githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  mbsimenvsec_codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
  mbsimenvsec_codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
  mbsimenvsec_codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
  mbsimenvsec_codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
jobs:



  getBuildMatrix:
    name: Get build matrix
    runs-on: ubuntu-latest
    outputs:
      matrixOutput: ${{steps.matrixStep.outputs.matrixStepOutput}}
    steps:
      - name: "Get branch combinations from MBSim-Env server"
        id: matrixStep
        shell: python
        run: |
          import json
          import requests
          import itertools
          # get repo and branch name
          repo="${{github.repository}}".split("/")[1]
          print("mfmfremove repo="+repo)
          repo="openmbv" #mfmf remove this line
          branch="${{github.ref_name}}"
          sha="${{github.sha}}"
          print("mfmfremove sha="+sha)
          sha="5e1108a787c298b481e31a5dfb2055eb3028f3d0" #mfmf remove this line
          print("Got action for repo="+repo+" branch="+branch+" sha="+sha)
          #mfmf eventName="${{github.event_name}}"
          eventName="schedule" #mfmf
          # get branch combinations
          if eventName=="push":
            model="CIBranches"
          elif eventName=="schedule":
            model="DailyBranches"
          else:
            raise RuntimeError("Unknown event name")
          response=requests.get("https://${{env.MBSIMENVWWW}}/service/db/getbranchcombi/"+model+"/", verify=False)
          branchCombination=response.json()["data"]
          # check repo
          if eventName=="schedule":
            matrix={"branches": branchCombination,
              "os": [
                {"buildType": "linux64-dailydebug"  , "image": "mbsimenv/build"     ,  "args": ""},
                {"buildType": "linux64-dailyrelease", "image": "mbsimenv/build"     ,  "args": ""},
                {"buildType": "win64-dailyrelease"  , "image": "mbsimenv/buildwin64",  "args": ""},
              ]}
          elif eventName=="push":
            # all branch combinations to build
            branches=list(filter(lambda x: x[repo+"Branch"]==branch, branchCombination))
            # if no branch combination is found build this branch with "master" of all other repos
            if len(branches)==0:
              branches=[{"fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"}]
              branches[0][repo+"Branch"]=branch+"*"+sha
            else:
              # override repo branch with sha
              for b in branches:
                b[repo+"Branch"]+="*"+sha
            matrix={"branches": branches,
              "os": [
                {"buildType": "linux64-ci", "image": "mbsimenv/build"     , "args": ""},
                {"buildType": "win64-ci"  , "image": "mbsimenv/buildwin64", "args": ""},
              ]}
          # linearize matrix and remove master, linux-dailydebug combination
          matrix=itertools.product(matrix["branches"], matrix["os"])
          matrix=map(lambda x: {"branches": x[0], "os": x[1]}, matrix)
          matrix=filter(lambda x: x["os"]["buildType"]!="linux64-dailydebug" or
                                  x["branches"]["fmatvecBranch"]!="master" or
                                  x["branches"]["hdf5serieBranch"]!="master" or
                                  x["branches"]["openmbvBranch"]!="master" or
                                  x["branches"]["mbsimBranch"]!="master", matrix)
          matrix={"data": list(matrix)}
          # set output
          print("Build matrix:\n"+json.dumps(matrix, indent=2))
          print("::set-output name=matrixStepOutput::"+json.dumps(matrix))
  buildMatrix:
    name: B&e
    uses: ./.github/workflows/mbsim-env-matrixbuild.yml
    needs: getBuildMatrix
    with:
      matrixInput: ${{needs.getBuildMatrix.outputs.matrixOutput}}
      uploadArtifactLocalLcovInput: false
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}



  buildPartitionedExamples:
    name: B
    uses: ./.github/workflows/mbsim-env-matrixbuild.yml
    #mfmf if: github.event_name=='schedule'
    if: true #mfmf
    with:
      matrixInput: |
        {"data":
          [{
            "branches": 
              {"fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"},
            "os":
              {"buildType": "linux64-dailydebug", "image": "mbsimenv/build",  "args": "--disableRunExamples"},
          }]
        }
      uploadArtifactLocalLcovInput: true
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}



  examplesPre:
    name: "E pre"
    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
    needs: buildPartitionedExamples
    with:
      matrixInput: |
        {"data": [
          {"args": "--runExamplesPre"}
        ]}
      buildInfoInput: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
      runexamplesInfoInput: '{"runID": -1}'
      downloadArtifactLocalLcovInput: false
      uploadArtifactLcovdataInput: false
      downloadArtifactLcovdataInput: false
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
  examplesRun:
    name: "E worker"
    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
    needs: [buildPartitionedExamples, examplesPre]
    with:
      matrixInput: |
        {"data": [
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"},
          {"args": "--runExamplesPartition"}
        ]}
      buildInfoInput: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
      runexamplesInfoInput: ${{needs.examplesPre.outputs.runexamplesInfo}}
      downloadArtifactLocalLcovInput: true
      uploadArtifactLcovdataInput: true
      downloadArtifactLcovdataInput: false
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
  examplesPost:
    name: "E post"
    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
    needs: [buildPartitionedExamples, examplesRun, examplesPre]
    with:
      matrixInput: |
        {"data": [
          {"args": "--runExamplesPost"}
        ]}
      buildInfoInput: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
      runexamplesInfoInput: ${{needs.examplesPre.outputs.runexamplesInfo}}
      downloadArtifactLocalLcovInput: true
      uploadArtifactLcovdataInput: false
      downloadArtifactLcovdataInput: true
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}



  examplesPreValgrind:
    name: "E valgrind pre"
    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
    needs: [buildPartitionedExamples, examplesRun] # needs only buildPartitionedExamples;
             # exampleRun is just added to priorize the normal runs over the valgrind run;
             # moreover the dynamic scheduling does not work for parallel --runExamplesPartition jobs;
             # (examplesPreValgrind is not stared before to ensure correct startTime recording in the MBSim-Env database)
    with:
      matrixInput: |
        {"data": [
          {"args": "--runExamplesPre --valgrindExamples"}
        ]}
      buildInfoInput: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
      runexamplesInfoInput: '{"runID": -1}'
      downloadArtifactLocalLcovInput: false
      uploadArtifactLcovdataInput: false
      downloadArtifactLcovdataInput: false
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
  examplesRunValgrind:
    name: "E valgrind worker"
    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
    needs: [buildPartitionedExamples, examplesPreValgrind]
    with:
      matrixInput: |
        {"data": [
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"},
          {"args": "--runExamplesPartition --valgrindExamples"}
        ]}
      buildInfoInput: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
      runexamplesInfoInput: ${{needs.examplesPreValgrind.outputs.runexamplesInfo}}
      downloadArtifactLocalLcovInput: true
      uploadArtifactLcovdataInput: true
      downloadArtifactLcovdataInput: false
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
  examplesPostValgrind:
    name: "E valgrind post"
    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
    needs: [buildPartitionedExamples, examplesRunValgrind, examplesPreValgrind]
    with:
      matrixInput: |
        {"data": [
          {"args": "--runExamplesPost --valgrindExamples"}
        ]}
      buildInfoInput: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
      runexamplesInfoInput: ${{needs.examplesPreValgrind.outputs.runexamplesInfo}}
      downloadArtifactLocalLcovInput: true
      uploadArtifactLcovdataInput: false
      downloadArtifactLcovdataInput: true
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
