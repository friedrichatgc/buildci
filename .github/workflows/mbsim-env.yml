name: MBSim-Env Build
on:
  push:
  schedule:
    - cron: '36 23 * * *'
env:
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: staging
  MBSIMENVSERVERNAME: wwwstaging.mbsim-env.de
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: www.mbsim-env.de:10443
  MBSIMENVDATABASE: www.mbsim-env.de:15432
  MBSIMENVFILESTORAGE: www.mbsim-env.de:11122
  # get secrets
  mbsimenvsec_githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  mbsimenvsec_codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
  mbsimenvsec_codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
  mbsimenvsec_codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
  mbsimenvsec_codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
jobs:
#mfmf  getBuildMatrix:
#mfmf    name: Get Build Matrix
#mfmf    runs-on: ubuntu-latest
#mfmf    outputs:
#mfmf      matrixOutput: ${{steps.matrixStep.outputs.matrixStepOutput}}
#mfmf    steps:
#mfmf      - name: "Query MBSim-Env for branch combinations and generate build matrix"
#mfmf        id: matrixStep
#mfmf        shell: python
#mfmf        run: |
#mfmf          import json
#mfmf          import requests
#mfmf          import itertools
#mfmf          # get repo and branch name
#mfmf          repo="${{github.repository}}".split("/")[1]
#mfmf          print("mfmfremove repo="+repo)
#mfmf          repo="openmbv" #mfmf remove this line
#mfmf          branch="${{github.ref_name}}"
#mfmf          sha="${{github.sha}}"
#mfmf          print("mfmfremove sha="+sha)
#mfmf          sha="5e1108a787c298b481e31a5dfb2055eb3028f3d0" #mfmf remove this line
#mfmf          print("Got action for repo="+repo+" branch="+branch+" sha="+sha)
#mfmf          eventName="${{github.event_name}}"
#mfmf          eventName="schedule" #mfmf
#mfmf          # get branch combinations
#mfmf          if eventName=="push":
#mfmf            model="CIBranches"
#mfmf          elif eventName=="schedule":
#mfmf            model="DailyBranches"
#mfmf          else:
#mfmf            raise RuntimeError("Unknown event name")
#mfmf          response=requests.get("https://${{env.MBSIMENVWWW}}/service/db/getbranchcombi/"+model+"/", verify=False)
#mfmf          branchCombination=response.json()["data"]
#mfmf          # check repo
#mfmf          if eventName=="schedule":
#mfmf            matrix={"branches": branchCombination,
#mfmf              "os": [
#mfmf                {"buildType": "linux64-dailydebug"  , "image": "mbsimenv/build"     ,  "args": ""},
#mfmf                {"buildType": "linux64-dailyrelease", "image": "mbsimenv/build"     ,  "args": ""},
#mfmf                {"buildType": "win64-dailyrelease"  , "image": "mbsimenv/buildwin64",  "args": ""},
#mfmf              ]}
#mfmf          elif eventName=="push":
#mfmf            # all branch combinations to build
#mfmf            branches=list(filter(lambda x: x[repo+"Branch"]==branch, branchCombination))
#mfmf            # if no branch combination is found build this branch with "master" of all other repos
#mfmf            if len(branches)==0:
#mfmf              branches=[{"fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"}]
#mfmf              branches[0][repo+"Branch"]=branch+"*"+sha
#mfmf            else:
#mfmf              # override repo branch with sha
#mfmf              for b in branches:
#mfmf                b[repo+"Branch"]+="*"+sha
#mfmf            matrix={"branches": branches,
#mfmf              "os": [
#mfmf                {"buildType": "linux64-ci", "image": "mbsimenv/build"     , "args": ""},
#mfmf                {"buildType": "win64-ci"  , "image": "mbsimenv/buildwin64", "args": ""},
#mfmf              ]}
#mfmf          # linearize matrix and remove master, linux-dailydebug combination
#mfmf          matrix=itertools.product(matrix["branches"], matrix["os"])
#mfmf          matrix=map(lambda x: {"branches": x[0], "os": x[1]}, matrix)
#mfmf          matrix=filter(lambda x: x["os"]["buildType"]!="linux64-dailydebug" or
#mfmf                                  x["branches"]["fmatvecBranch"]!="master" or
#mfmf                                  x["branches"]["hdf5serieBranch"]!="master" or
#mfmf                                  x["branches"]["openmbvBranch"]!="master" or
#mfmf                                  x["branches"]["mbsimBranch"]!="master", matrix)
#mfmf          matrix={"data": list(matrix)}
#mfmf          # set output
#mfmf          print("Build matrix:\n"+json.dumps(matrix, indent=2))
#mfmf          print("::set-output name=matrixStepOutput::"+json.dumps(matrix))
#mfmf  buildMatrix:
#mfmf    name: Build & Basic Examples
#mfmf    uses: ./.github/workflows/mbsim-env-matrixbuild.yml
#mfmf    needs: getBuildMatrix
#mfmf    with:
#mfmf      matrixInput: ${{needs.getBuildMatrix.outputs.matrixOutput}}
#mfmf      uploadArtifactInput: false
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf  buildPartitionedExamples:
#mfmf    name: Build
#mfmf    uses: ./.github/workflows/mbsim-env-matrixbuild.yml
#mfmf    #if: github.event_name=='schedule'
#mfmf    if: true #mfmf
#mfmf    with:
#mfmf      matrixInput: |
#mfmf        {"data":
#mfmf          [{
#mfmf            "branches": 
#mfmf              {"fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"},
#mfmf            "os":
#mfmf              {"buildType": "linux64-dailydebug", "image": "mbsimenv/build",  "args": "--disableRunExamples"},
#mfmf          }]
#mfmf        }
#mfmf      uploadArtifactInput: true
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}






  buildPartitionedExamples: #mfmf only for testing, replace by above job
    runs-on: ubuntu-latest
    outputs:
      buildInfo: '{"buildRunID": 123, "repo": {"fmatvec": "74764a", "hdf5serie": "74764b", "openmbv": "74764c", "mbsim": "74764d"}}'
    steps:
      - run: mkdir -p ${{github.workspace}}/mbsim-env && echo testdata > ${{github.workspace}}/mbsim-env/local.tar.gz
      - name: "Upload artifact archive .../mbsim-env/local/"
        uses: actions/upload-artifact@v3
        with:
          name: mbsim-env-local
          retention-days: 1
          path: ${{github.workspace}}/mbsim-env/local.tar.gz
  examplesPre:
    name: "Pre examples"
    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
    needs: buildPartitionedExamples
    with:
      matrixInput: |
        {"data": [
          "--runExamplesPre"
        ]}
      buildInfoInput: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
      downloadArtifactInput: false
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
  examplesRun:
    name: "Run examples"
    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
    needs: [buildPartitionedExamples, examplesPre]
    with:
      matrixInput: |
        {"data": [
          "--runExamplesPartition 0/4",
          "--runExamplesPartition 1/4",
          "--runExamplesPartition 2/4",
          "--runExamplesPartition 3/4"
        ]}
      buildInfoInput: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
      downloadArtifactInput: false
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
  examplesPost:
    name: "Post examples"
    uses: ./.github/workflows/mbsim-env-matrixrunexamples.yml
    needs: [buildPartitionedExamples, examplesRun]
    with:
      matrixInput: |
        {"data": [
          "--runExamplesPost"
        ]}
      buildInfoInput: ${{needs.buildPartitionedExamples.outputs.buildInfo}}
      downloadArtifactInput: false
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
