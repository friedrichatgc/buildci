name: Test
on:
  push:
jobs:
  build:
    name: "Test"
    runs-on: ubuntu-latest
    steps:
      - name: "Dump build config"
        run: >
          echo -e " buildType       = a
                    image           = a
                    fmatvecBranch   = a
                    hdf5serieBranch = a
                    openmbvBranch   = a
                    mbsimBranch     = a
                    args            = a
                    Triggered by repo = ${{github.repository}}
                                 branch = ${{github.ref_name}}
                                 sha = ${{github.sha}}
                                 event = ${{github.event_name}}" | tr -s ' '
      - name: "Check what to do"
        id: whatToDo
        shell: python
        run: |
          import requests
          import json
          # get current branches SHA (if not SHA is specified explicitly)
          branches={}
          branches["fmatvec"]="a"
          branches["hdf5serie"]="b"
          branches["openmbv"]="c"
          branches["mbsim"]="d"
          skip=True
          runID=None
          data={"skip": skip, "runID": runID, "branches": branches}
          print("The following build is done:\n"+json.dumps(data, indent=2))
          print("::set-output name=data::"+json.dumps(data))
      - run: echo A${{steps.whatToDo.outputs.data}}A
      - run: echo B${{fromJson(steps.whatToDo.outputs.data).skip}}B
      - run: echo C${{fromJson(steps.whatToDo.outputs.data).runID}}C
      - run: echo C${{fromJson(steps.whatToDo.outputs.data).runID && '--args'}} ${{fromJson(steps.whatToDo.outputs.data).runID}}C
#      - name: "Create build matrix UUID"
#        if: !fromJson(steps.whatToDo.outputs.data).skip
#        shell: python
#        id: matrixUUID
#        run: |
#          import uuid
#          print("::set-output name=matrixUUID::"+str(uuid.uuid4()))
#      - name: "Cache: ccache"
#        if: !fromJson(steps.whatToDo.outputs.data).skip
#        uses: actions/cache@v2
#        with:
#          path: ${{github.workspace}}/mbsim-ccache
#          key: ccache-${{matrix.data.os.buildType}}--${{steps.matrixUUID.outputs.matrixUUID}}
#          restore-keys: |
#            ccache-${{matrix.data.os.buildType}}--
#      - name: "Cache: fix ccache file permissions"
#        if: !fromJson(steps.whatToDo.outputs.data).skip
#        run: chmod -R 777 ${{github.workspace}}/mbsim-ccache # the docker user id is different than the current user id
#      - name: "Docker: run container"
#        if: !fromJson(steps.whatToDo.outputs.data).skip
#        run: >
#          docker run
#          --init
#          --label buildtype=${{matrix.data.os.buildType}}
#          --env MBSIMENVDATABASE
#          --env MBSIMENVFILESTORAGE
#          --env MBSIMENVSERVERNAME
#          --env MBSIMENVTAGNAME
#          --env MBSIMENVIMAGEID=$(docker image inspect -f "{{.Id}}" ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}})
#          --env mbsimenvsec_githubAccessToken
#          --env mbsimenvsec_djangoSecretKey
#          --env mbsimenvsec_postgresPassword
#          --env mbsimenvsec_filestoragePassword
#          --env mbsimenvsec_codecovUploadToken_fmatvec
#          --env mbsimenvsec_codecovUploadToken_hdf5serie
#          --env mbsimenvsec_codecovUploadToken_openmbv
#          --env mbsimenvsec_codecovUploadToken_mbsim
#          -v ${{github.workspace}}/mbsim-env:/mbsim-env
#          -v ${{github.workspace}}/mbsim-ccache:/mbsim-ccache
#          ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}}
#          --buildType ${{matrix.data.os.buildType}}
#          --executor '<a class="MBSIMENV_EXECUTOR_GITHUBACTION" href="https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}/attempts/${{github.run_attempt}}">GitHub Actions</a>'
#          -j $(nproc)
#          ${{github.run_attempt>1 && '--forceBuild' || ''}}
#          --ccacheSize 5
#          --fmatvecBranch ${{fromJson(steps.whatToDo.outputs.data).branches.fmatvec}}
#          --hdf5serieBranch ${{fromJson(steps.whatToDo.outputs.data).branches.hdf5serie}}
#          --openmbvBranch ${{fromJson(steps.whatToDo.outputs.data).branches.openmbv}}
#          --mbsimBranch ${{fromJson(steps.whatToDo.outputs.data).branches.mbsim}}
#          --buildRunID ${{fromJson(steps.whatToDo.outputs.data).runID}}
#          ${{matrix.data.os.args}}
#      - name: "Dump link to MBSim-Env server"
#        if: !fromJson(steps.whatToDo.outputs.data).skip
#        id: buildDetails
#        shell: python
#        run: |
#          import json
#          try:
#            with open("${{github.workspace}}/mbsim-env/local/.buildInfo.json", "r") as f:
#              buildInfo=json.load(f)
#            if buildInfo["skipped"]:
#              print("This build was skipped since the same build was already done")
#            else:
#              print("https://${{env.MBSIMENVSERVERNAME}}/builds/run/"+str(buildInfo["buildRunID"])+"/")
#            print("::set-output name=buildInfo::"+json.dumps(buildInfo))
#          except:
#            print("No buildInfo file found")
#            print("::set-output name=buildInfo::{}")
#      - name: "Artifact: tar/compress prefix and coverage-files"
#        if: inputs.uploadArtifactLocalLcov && !fromJson(steps.buildDetails.outputs.buildInfo).skipped && !fromJson(steps.whatToDo.outputs.data).skip
#        run: >
#          (cd ${{github.workspace}}/mbsim-env/ && find -name "*.gcda" >  ${{github.workspace}}/local-cov.files) &&
#          (cd ${{github.workspace}}/mbsim-env/ && find -name "*.gcno" >> ${{github.workspace}}/local-cov.files) &&
#          tar -czf ${{github.workspace}}/local-cov.tar.gz -C ${{github.workspace}}/mbsim-env/
#          local/ -T ${{github.workspace}}/local-cov.files;
#          rm -f ${{github.workspace}}/local-cov.files
#      - name: "Artifact: upload prefix and coverage-files"
#        if: inputs.uploadArtifactLocalLcov && !fromJson(steps.buildDetails.outputs.buildInfo).skipped && !fromJson(steps.whatToDo.outputs.data).skip
#        uses: actions/upload-artifact@v3
#        with:
#          name: mbsim-env-local-cov
#          retention-days: 1
#          path: ${{github.workspace}}/local-cov.tar.gz
#      #MISSING skip cache upload if ${{fromJson(steps.buildDetails.outputs.buildInfo).skipped}}
