#name: MBSim-Env Build
#on:
#  push:
#env:
#  ENVA: myenva
#jobs:
#  get_matrix:
#    name: Get Build Matrix
#    runs-on: ubuntu-latest
#    container:
#      image: alpine:3.8
#      env:
#        ENVA:
#        ENVB: myenvb
#      volumes:
#        - ${{github.workspace}}/mbsim-env:/mbsim-env
#      options: --init
#    steps:
#      - name: "Query MBSim-Env for CI branch combinations and generate build matrix"
#        run: echo xxxx $ENVA $ENVB
#      - run: ls -la /



name: MBSim-Env Build
on:
  push:
  schedule:
    - cron: '36 23 * * *'
env:
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: staging
  MBSIMENVSERVERNAME: wwwstaging.mbsim-env.de
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: www.mbsim-env.de:10443
  MBSIMENVDATABASE: www.mbsim-env.de:15432
  MBSIMENVFILESTORAGE: www.mbsim-env.de:11122
  # get secrets
  mbsimenvsec_githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  mbsimenvsec_codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
  mbsimenvsec_codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
  mbsimenvsec_codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
  mbsimenvsec_codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
jobs:
  get_matrix:
    name: Get Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrixOutput: ${{steps.matrixStep.outputs.matrixStepOutput}}
    steps:
      - name: "Query MBSim-Env for CI branch combinations and generate build matrix"
        id: matrixStep
        shell: python
        run: |
          import json
          import requests
          # get repo and branch name
          repo="${{github.repository}}".split("/")[1]
          print("mfmfremove repo="+repo)
          repo="openmbv" #mfmf remove this line
          branch="${{github.ref_name}}"
          sha="${{github.sha}}"
          print("mfmfremove sha="+sha)
          sha="5e1108a787c298b481e31a5dfb2055eb3028f3d0" #mfmf remove this line
          print("Got action for repo="+repo+" branch="+branch+" sha="+sha)
          # get branch combinations
          ci="${{github.event_name}}"=="push"
          model="CIBranches" if ci else "DailyBranches"
          response=requests.get("https://${{env.MBSIMENVWWW}}/service/db/getbranchcombi/"+model+"/", verify=False)
          branchCombination=response.json()["data"]
          # check repo
          if not ci:
            matrix={"branches": branchCombination,
                    "os": [
                            {"buildType": "linux64-dailydebug", "image": "mbsimenv/build"     },
                            {"buildType": "linux64-dailybuild", "image": "mbsimenv/build"     },
                            {"buildType": "win64-dailybuild"  , "image": "mbsimenv/buildwin64"},
                          ]}
          elif ci:
            # all branch combinations to build
            branches=list(filter(lambda x: x[repo+"Branch"]==branch, branchCombination))
            # if no branch combination is found build this branch with "master" of all other repos
            if len(branches)==0:
              branches=[{"id": 1, "fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"}]
              branches[0][repo+"Branch"]+="*"+sha
            else:
              # override repo branch with sha
              for b in branches:
                b[repo+"Branch"]+="*"+sha
            matrix={"branches": branches,
                    "os": [
                            {"buildType": "linux64-ci", "image": "mbsimenv/build"     },
                            {"buildType": "win64-ci"  , "image": "mbsimenv/buildwin64"},
                          ]}
          # set output
          print("Build matrix:\n"+json.dumps(matrix, indent=2))
          print("::set-output name=matrixStepOutput::"+json.dumps(matrix))
  build:
    name: "Build ${{matrix.os.buildType}}: ${{matrix.branches.fmatvecBranch}} ${{matrix.branches.hdf5serieBranch}} ${{matrix.branches.openmbvBranch}} ${{matrix.branches.mbsimBranch}}"
    runs-on: ubuntu-latest
    needs: get_matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.get_matrix.outputs.matrixOutput)}}
    container:
#mfmf      image: ${{matrix.os.image}}:${{env.MBSIMENVTAGNAME}}
      image: ${{matrix.os.image}}:staging
      env:
        MBSIMENVDATABASE:
        MBSIMENVFILESTORAGE:
        MBSIMENVSERVERNAME:
        MBSIMENVTAGNAME:
#mfmf        MBSIMENVIMAGEID: $(mfmf docker image inspect -f "{{.Id}}" ${{matrix.os.image}}:${{env.MBSIMENVTAGNAME}})
        mbsimenvsec_githubStatusAccessToken:
        mbsimenvsec_djangoSecretKey:
        mbsimenvsec_postgresPassword:
        mbsimenvsec_codecovUploadToken_fmatvec:
        mbsimenvsec_codecovUploadToken_hdf5serie:
        mbsimenvsec_codecovUploadToken_openmbv:
        mbsimenvsec_codecovUploadToken_mbsim:
      options: --init --label buildtype=${{matrix.os.buildType}}
    steps:
      - name: "Dump build config"
        run: >
          echo -e " buildType       = ${{matrix.os.buildType}}
                    image           = ${{matrix.os.image}}:${{env.MBSIMENVTAGNAME}}
                    fmatvecBranch   = ${{matrix.branches.fmatvecBranch}}
                    hdf5serieBranch = ${{matrix.branches.hdf5serieBranch}}
                    openmbvBranch   = ${{matrix.branches.openmbvBranch}}
                    mbsimBranch     = ${{matrix.branches.mbsimBranch}}
                    Triggered by repo = ${{github.repository}}
                                 branch = ${{github.ref_name}}
                                 sha = ${{github.sha}}
                                 event = ${{github.event_name}}" | tr -s ' '
      - name: "Run build/examples"
        run: echo mfmfremove
#        run: >
#          /context/entrypoint.py
#          --buildType ${{matrix.os.buildType}}
#          --executor '<a href="https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}/attempts/${{github.run_attempt}}">GitHub Action</a>'
#          -j $(nproc)
#          --fmatvecBranch ${{matrix.branches.fmatvecBranch}}
#          --hdf5serieBranch ${{matrix.branches.hdf5serieBranch}}
#          --openmbvBranch ${{matrix.branches.openmbvBranch}}
#          --mbsimBranch ${{matrix.branches.mbsimBranch}}
      - name: "Detailed build/examples output"
        if: always()
        shell: python
        run: |
          import json
          with open("/mbsim-env/local/.buildInfo.json", "r") as f:
            buildInfo=json.load(f)
          print("https://${{env.MBSIMENVSERVERNAME}}/builds/run/"+str(buildInfo["buildRunID"])+"/")
