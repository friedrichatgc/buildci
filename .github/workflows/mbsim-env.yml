name: MBSim-Env Build
on:
  push:
  schedule:
    - cron: '36 23 * * *'
env:
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: staging
  MBSIMENVSERVERNAME: wwwstaging.mbsim-env.de
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: www.mbsim-env.de:10443
  MBSIMENVDATABASE: www.mbsim-env.de:15432
  MBSIMENVFILESTORAGE: www.mbsim-env.de:11122
  # get secrets
  mbsimenvsec_githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  mbsimenvsec_codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
  mbsimenvsec_codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
  mbsimenvsec_codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
  mbsimenvsec_codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
jobs:
  getBuildMatrix:
    name: Get Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrixOutput: ${{steps.matrixStep.outputs.matrixStepOutput}}
    steps:
      - name: "Query MBSim-Env for branch combinations and generate build matrix"
        id: matrixStep
        shell: python
        run: |
          import json
          import requests
          import itertools
          # get repo and branch name
          repo="${{github.repository}}".split("/")[1]
          print("mfmfremove repo="+repo)
          repo="openmbv" #mfmf remove this line
          branch="${{github.ref_name}}"
          sha="${{github.sha}}"
          print("mfmfremove sha="+sha)
          sha="5e1108a787c298b481e31a5dfb2055eb3028f3d0" #mfmf remove this line
          print("Got action for repo="+repo+" branch="+branch+" sha="+sha)
          eventName="${{github.event_name}}"
          #eventName="schedule" #mfmf
          # get branch combinations
          if eventName=="push":
            model="CIBranches"
          elif eventName=="schedule":
            model="DailyBranches"
          else:
            raise RuntimeError("Unknown event name")
          response=requests.get("https://${{env.MBSIMENVWWW}}/service/db/getbranchcombi/"+model+"/", verify=False)
          branchCombination=response.json()["data"]
          # check repo
          if eventName=="schedule":
            matrix={"branches": branchCombination,
              "os": [
                {"buildType": "linux64-dailydebug"  , "image": "mbsimenv/build"     ,  "args": ""},
                {"buildType": "linux64-dailyrelease", "image": "mbsimenv/build"     ,  "args": ""},
                {"buildType": "win64-dailyrelease"  , "image": "mbsimenv/buildwin64",  "args": ""},
              ]}
          elif eventName=="push":
            # all branch combinations to build
            branches=list(filter(lambda x: x[repo+"Branch"]==branch, branchCombination))
            # if no branch combination is found build this branch with "master" of all other repos
            if len(branches)==0:
              branches=[{"fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"}]
              branches[0][repo+"Branch"]=branch+"*"+sha
            else:
              # override repo branch with sha
              for b in branches:
                b[repo+"Branch"]+="*"+sha
            matrix={"branches": branches,
              "os": [
                {"buildType": "linux64-ci", "image": "mbsimenv/build"     , "args": ""},
                {"buildType": "win64-ci"  , "image": "mbsimenv/buildwin64", "args": ""},
              ]}
          # linearize matrix and remove master, linux-dailydebug combination
          matrix=itertools.product(matrix["branches"], matrix["os"])
          matrix=map(lambda x: {"branches": x[0], "os": x[1]}, matrix)
          matrix=filter(lambda x: x["os"]["buildType"]!="linux64-dailydebug" or
                                  x["branches"]["fmatvecBranch"]!="master" or
                                  x["branches"]["hdf5serieBranch"]!="master" or
                                  x["branches"]["openmbvBranch"]!="master" or
                                  x["branches"]["mbsimBranch"]!="master", matrix)
          matrix={"data": list(matrix)}
          # set output
          print("Build matrix:\n"+json.dumps(matrix, indent=2))
          print("::set-output name=matrixStepOutput::"+json.dumps(matrix))
  buildMatrix:
    name: Build & Basic Examples
    uses: ./.github/workflows/mbsim-env-matrixbuild.yml
    needs: getBuildMatrix
    with:
      matrixInput: ${{needs.getBuildMatrix.outputs.matrixOutput}}
      uploadArtifactInput: false
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
  build:
    name: Build
    uses: ./.github/workflows/mbsim-env-matrixbuild.yml
    if: github.event_name=='schedule'
    #if: true #mfmf
    with:
      matrixInput: |
        {"data":
          [{
            "branches": 
              {"fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"},
            "os":
              {"buildType": "linux64-dailydebug", "image": "mbsimenv/build",  "args": "--disableRunExamples"},
          }]
        }
      uploadArtifactInput: true
    secrets:
      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
      djangoSecretKey: ${{secrets.djangoSecretKey}}
      postgresPassword: ${{secrets.postgresPassword}}
      filestoragePassword: ${{secrets.filestoragePassword}}
      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}






#mfmf  build:
#mfmf    runs-on: ubuntu-latest
#mfmf    steps:
#mfmf      - run: echo dummy build
#mfmf#  dummy:
#mfmf#    name: "dumm examples"
#mfmf#    runs-on: ubuntu-latest
#mfmf#    steps:
#mfmf#      - name: "Download artifact archive .../mbsim-env/local/"
#mfmf##artifactdownload        uses: actions/download-artifact@v3
#mfmf##artifactdownload        with:
#mfmf##artifactdownload          name: mbsim-env-local
#mfmf##artifactdownload          path: ${{github.workspace}}
#mfmf#        run: wget -q https://www.mbsim-env.de:11443/8465739265725648/xx/local.tar.gz -O ${{github.workspace}}/local.tar.gz # replace this with artifactdownload
#mfmf#      - name: "Unarchive artifact .../mbsim-env/local/"
#mfmf#        run: >
#mfmf#          mkdir -p ${{github.workspace}}/mbsim-env/ &&
#mfmf#          tar -xzf ${{github.workspace}}/local.tar.gz -C ${{github.workspace}}/mbsim-env/
#mfmf  examplesPre:
#mfmf    name: "Pre examples"
#mfmf    needs: build
#mfmf    uses: ./.github/workflows/mbsim-env-matrixbuild.yml
#mfmf    with: # mfmf use git sha1 instead of branchname
#mfmf      matrixInput: |
#mfmf        {"data":
#mfmf          [{
#mfmf            "branches": 
#mfmf              {"fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"},
#mfmf            "os":
#mfmf              {"buildType": "linux64-dailydebug", "image": "mbsimenv/build",  "args": "--runExamplesPre"},
#mfmf          }]
#mfmf        }
#mfmf      uploadArtifactInput: false
#mfmf    secrets:
#mfmf      githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
#mfmf      djangoSecretKey: ${{secrets.djangoSecretKey}}
#mfmf      postgresPassword: ${{secrets.postgresPassword}}
#mfmf      filestoragePassword: ${{secrets.filestoragePassword}}
#mfmf      codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
#mfmf      codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
#mfmf      codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
#mfmf      codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
#mfmf#  examplesRun:
#mfmf#    name: "Run examples"
#mfmf#    runs-on: ubuntu-latest
#mfmf#    needs: examplesPre
#mfmf#    strategy:
#mfmf#      fail-fast: false
#mfmf#      matrix:
#mfmf#        index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # at most 10 jobs can run in parallel
#mfmf#    steps:
#mfmf#      - run: echo Run examples ${{matrix.index}}/10
#mfmf#  examplesPos:
#mfmf#    name: "Post examples"
#mfmf#    runs-on: ubuntu-latest
#mfmf#    needs: examplesRun
#mfmf#    steps:
#mfmf#      - run: echo Post examples
