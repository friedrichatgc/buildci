name: MBSim-Env Matrix-Build
on:
  workflow_call:
    inputs:
      matrixInput:
        required: true
        type: string
env:
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: staging
  MBSIMENVSERVERNAME: wwwstaging.mbsim-env.de
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: www.mbsim-env.de:10443
  MBSIMENVDATABASE: www.mbsim-env.de:15432
  MBSIMENVFILESTORAGE: www.mbsim-env.de:11122
  # get secrets
  mbsimenvsec_githubStatusAccessToken: ${{secrets.githubStatusAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  mbsimenvsec_codecovUploadToken_fmatvec: ${{secrets.codecovUploadToken_fmatvec}}
  mbsimenvsec_codecovUploadToken_hdf5serie: ${{secrets.codecovUploadToken_hdf5serie}}
  mbsimenvsec_codecovUploadToken_openmbv: ${{secrets.codecovUploadToken_openmbv}}
  mbsimenvsec_codecovUploadToken_mbsim: ${{secrets.codecovUploadToken_mbsim}}
jobs:
  build:
    name: "Build ${{matrix.os.buildType}}: ${{matrix.branches.fmatvecBranch}} ${{matrix.branches.hdf5serieBranch}} ${{matrix.branches.openmbvBranch}} ${{matrix.branches.mbsimBranch}}"
    runs-on: ubuntu-latest
    needs: get_matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(inputs.matrixInput)}}
    steps:
      - run: echo mfmf a ${{env.mbsimenvsec_githubStatusAccessToken}} b $mbsimenvsec_githubStatusAccessToken c
      - name: "Dump build config"
        run: >
          echo -e " buildType       = ${{matrix.os.buildType}}
                    image           = ${{matrix.os.image}}:${{env.MBSIMENVTAGNAME}}
                    fmatvecBranch   = ${{matrix.branches.fmatvecBranch}}
                    hdf5serieBranch = ${{matrix.branches.hdf5serieBranch}}
                    openmbvBranch   = ${{matrix.branches.openmbvBranch}}
                    mbsimBranch     = ${{matrix.branches.mbsimBranch}}
                    Triggered by repo = ${{github.repository}}
                                 branch = ${{github.ref_name}}
                                 sha = ${{github.sha}}
                                 event = ${{github.event_name}}" | tr -s ' '
#      - name: "Pull docker build image"
#        run: >
#          docker image pull ${{matrix.os.image}}:${{env.MBSIMENVTAGNAME}} &&
#          mkdir -m 777 -p ${{github.workspace}}/mbsim-env ${{github.workspace}}/mbsim-ccache
#      - name: "Create matrix UUID"
#        shell: python
#        id: matrixUUIDStep
#        run: |
#          import uuid
#          print("::set-output name=matrixUUIDStepOutput::"+str(uuid.uuid4()))
#      - name: "Cache ccache directory"
#        uses: actions/cache@v2
#        with:
#          path: ${{github.workspace}}/mbsim-ccache
#          key: ccache-${{matrix.os.buildType}}--${{steps.matrixUUIDStep.outputs.matrixUUIDStepOutput}}
#          restore-keys: |
#            ccache-${{matrix.os.buildType}}--
#      - name: "Fix cached ccache file permissions"
#        run: chmod -R 777 ${{github.workspace}}/mbsim-ccache # the docker user id is different than the current user id
#      - name: "Run build/examples"
#        run: >
#          docker run
#          --init
#          --label buildtype=${{matrix.os.buildType}}
#          --env MBSIMENVDATABASE
#          --env MBSIMENVFILESTORAGE
#          --env MBSIMENVSERVERNAME
#          --env MBSIMENVTAGNAME
#          --env MBSIMENVIMAGEID=$(docker image inspect -f "{{.Id}}" ${{matrix.os.image}}:${{env.MBSIMENVTAGNAME}})
#          --env mbsimenvsec_githubStatusAccessToken
#          --env mbsimenvsec_djangoSecretKey
#          --env mbsimenvsec_postgresPassword
#          --env mbsimenvsec_filestoragePassword
#          --env mbsimenvsec_codecovUploadToken_fmatvec
#          --env mbsimenvsec_codecovUploadToken_hdf5serie
#          --env mbsimenvsec_codecovUploadToken_openmbv
#          --env mbsimenvsec_codecovUploadToken_mbsim
#          -v ${{github.workspace}}/mbsim-env:/mbsim-env
#          -v ${{github.workspace}}/mbsim-ccache:/mbsim-ccache
#          ${{matrix.os.image}}:${{env.MBSIMENVTAGNAME}}
#          --buildType ${{matrix.os.buildType}}
#          --executor '<a href="https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}/attempts/${{github.run_attempt}}">GitHub Actions</a>'
#          -j $(nproc)
#          --ccacheSize 5
#          --fmatvecBranch ${{matrix.branches.fmatvecBranch}}
#          --hdf5serieBranch ${{matrix.branches.hdf5serieBranch}}
#          --openmbvBranch ${{matrix.branches.openmbvBranch}}
#          --mbsimBranch ${{matrix.branches.mbsimBranch}}
#          ${{matrix.os.args}}
#          || exit 0
#          # do not report error (is handled by www.mbsime-env.de and cache should also be saved in case of errors)
#      - name: "Detailed build/examples output"
#        if: always()
#        shell: python
#        run: |
#          import json
#          with open("${{github.workspace}}/mbsim-env/local/.buildInfo.json", "r") as f:
#            buildInfo=json.load(f)
#          print("https://${{env.MBSIMENVSERVERNAME}}/builds/run/"+str(buildInfo["buildRunID"])+"/")
